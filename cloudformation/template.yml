AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  CloudFormation template for ComfyUI on Amazon SageMaker with synchronous and asynchronous endpoints

Parameters:
  AppName:
    Type: String
    Default: comfyui
  DeploymentBucket:
    Type: String
    Default: comfyui-on-sagemaker
  LambdaPackageS3Key:
    Type: String
    Default: lambda.zip
  ModelVersion:
    Type: String
    Default: default
  ModelDataS3Key:
    Type: String
    Default: model-data-comfyui-default.tgz
  ModelEcrImage:
    Type: String
    Default: comfyui-inference:default
  SageMakerInstanceType:
    Type: String
    AllowedValues:
      - ml.g4dn.xlarge
      - ml.g4dn.2xlarge
      - ml.g5.xlarge
      - ml.g5.2xlarge
      - ml.g5.4xlarge
      - ml.g5.8xlarge
      - ml.g5.16xlarge
      - ml.g5.12xlarge
      - ml.g5.24xlarge
      - ml.g5.48xlarge
      - ml.g6.xlarge
      - ml.g6.2xlarge
      - ml.g6.4xlarge
      - ml.g6.8xlarge
      - ml.g6.16xlarge
      - ml.g6.12xlarge
      - ml.g6.24xlarge
      - ml.g6.48xlarge
    Default: ml.g5.4xlarge
  LambdaUrlAuthType:
    Type: String
    AllowedValues:
      - NONE
      - AWS_IAM
    Default: AWS_IAM

Conditions:
  # This condition currently always evaluates to true.
  EnableAutoScaling: !Equals [ "true", "true" ]
  LambdaUrlAuthTypeIsNone: !Equals [ !Ref LambdaUrlAuthType, "NONE" ]

Resources:
  ComfyUIModelExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AppName}-sagemaker-model-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess


  ComfyUIModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      EnableNetworkIsolation: true
      ExecutionRoleArn: !GetAtt ComfyUIModelExecutionRole.Arn
      ModelName: !Sub "${AppName}-sync"
      PrimaryContainer:
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ModelEcrImage}"
        ModelDataUrl: !Sub "s3://${DeploymentBucket}/${ModelDataS3Key}"

  ComfyUIEndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: !Sub "${AppName}-${ModelVersion}"
      ProductionVariants:
        - VariantName: !Sub "${AppName}-${ModelVersion}"
          # Use the modelâ€™s logical ID; !Ref returns the ModelName defined in the resource.
          ModelName: !Ref ComfyUIModel
          ContainerStartupHealthCheckTimeoutInSeconds: 600
          InitialInstanceCount: 1
          InstanceType: !Sub "${SageMakerInstanceType}"
          RoutingConfig:
            RoutingStrategy: LEAST_OUTSTANDING_REQUESTS

  ComfyUIEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub "${AppName}"
      EndpointConfigName: !GetAtt ComfyUIEndpointConfig.EndpointConfigName

  ComfyUIScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    DependsOn: ComfyUIEndpoint
    Condition: EnableAutoScaling
    Properties:
      PolicyName: !Sub scale-in-scale-out-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ComfyUIScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 10000
        CustomizedMetricSpecification:
          MetricName: Duration
          Namespace: AWS/Lambda
          Dimensions:
            - Name: FunctionName
              Value: !Ref ComfyUIFunction
          Statistic: Average
        ScaleInCooldown: 1800
        ScaleOutCooldown: 1800
        DisableScaleIn: false

  ComfyUIScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: ComfyUIEndpoint
    Condition: EnableAutoScaling
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Sub "endpoint/${ComfyUIEndpoint}/variant/${AppName}-${ModelVersion}"
      ScalableDimension: sagemaker:variant:DesiredInstanceCount
      ServiceNamespace: sagemaker
      # Optional: Uncomment below to define autoscaling capacity according to schedule
      # ScheduledActions:
      #   - ScheduledActionName: scheduled-action-at-1800-utc
      #     ScalableTargetAction:
      #       MaxCapacity: 1
      #       MinCapacity: 1
      #     Schedule: cron(0 18 * * ? *)
      #   - ScheduledActionName: scheduled-action-at-0400-utc
      #     ScalableTargetAction:
      #       MaxCapacity: 3
      #       MinCapacity: 1
      #     Schedule: cron(0 4 * * ? *)

  ComfyUIFunctionRole:
    Type: "AWS::IAM::Role"
    DependsOn: ComfyUIEndpoint
    Properties:
      RoleName: !Sub "${AppName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AppName}-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                # Use the full ARN for the endpoint
                Resource: !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${AppName}"

  ComfyUIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${AppName}-lambda"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ComfyUIFunctionRole.Arn
      Runtime: python3.12
      MemorySize: 256
      Timeout: 120
      Architectures:
        - arm64
      Code:
        S3Bucket: !Sub "${DeploymentBucket}"
        S3Key: !Sub "${LambdaPackageS3Key}"
      Environment:
        Variables:
          # Use !Ref to get the endpoint name.
          ENDPOINT_NAME: !Ref ComfyUIEndpoint

  ComfyUIFunctionUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: !If [ LambdaUrlAuthTypeIsNone, "NONE", "AWS_IAM" ]
      InvokeMode: BUFFERED
      TargetFunctionArn: !GetAtt ComfyUIFunction.Arn

  ComfyUIFunctionUrlPermission:
    Type: "AWS::Lambda::Permission"
    Condition: LambdaUrlAuthTypeIsNone
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !Ref ComfyUIFunction
      FunctionUrlAuthType: "NONE"
      Principal: "*"

  ComfyUIAsyncModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      EnableNetworkIsolation: true
      ExecutionRoleArn: !GetAtt ComfyUIModelExecutionRole.Arn
      ModelName: !Sub "comfy-async-model"
      PrimaryContainer:
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ModelEcrImage}"
        ModelDataUrl: !Sub "s3://${DeploymentBucket}/${ModelDataS3Key}"

  ComfyUIAsyncEndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: !Sub "comfyui-async-config"
      ProductionVariants:
        - VariantName: "AsyncVariant"
          ModelName: !GetAtt ComfyUIAsyncModel.ModelName
          InitialInstanceCount: 1
          InstanceType: !Ref SageMakerInstanceType
          ContainerStartupHealthCheckTimeoutInSeconds: 1200
      AsyncInferenceConfig:
        OutputConfig:
          S3OutputPath: !Sub "s3://${DeploymentBucket}/async-outputs/"
          KmsKeyId: "alias/aws/s3"
        ClientConfig:
          MaxConcurrentInvocationsPerInstance: 2

  ComfyUIAsyncEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub "comfy-async-end"
      EndpointConfigName: !GetAtt ComfyUIAsyncEndpointConfig.EndpointConfigName

Outputs:
  ComfyUIFunctionUrl:
    Description: Lambda Function URL
    Value: !GetAtt ComfyUIFunctionUrl.FunctionUrl
  ComfyUIEndpoint:
    Description: ARN of the SageMaker inference endpoint
    Value: !Ref ComfyUIEndpoint
  ComfyUIAsyncEndpoint:
    Description: ARN of the asynchronous SageMaker endpoint
    Value: !Ref ComfyUIAsyncEndpoint
